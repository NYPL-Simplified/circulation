from functools import wraps
import flask
from flask import (
    Response,
    redirect,
    make_response
)

from api.app import app
from api.config import Configuration

from core.util.problem_detail import ProblemDetail
from core.app_server import returns_problem_detail
from core.model import (
    ConfigurationSetting,
    Library,
)

from .controller import setup_admin_controllers
from .templates import (
    admin_sign_in_again as sign_in_again_template,
)
from api.routes import (
    has_library,
    library_route,
    allows_library,
    allows_cors
)

import urllib.request, urllib.parse, urllib.error
from datetime import timedelta
from core.local_analytics_provider import LocalAnalyticsProvider

# An admin's session will expire after this amount of time and
# the admin will have to log in again.
app.permanent_session_lifetime = timedelta(hours=9)

@app.before_first_request
def setup_admin(_db=None):
    if getattr(app, 'manager', None) is not None:
        setup_admin_controllers(app.manager)
    _db = _db or app._db
    # The secret key is used for signing cookies for admin login
    app.secret_key = ConfigurationSetting.sitewide_secret(
        _db, Configuration.SECRET_KEY
    )
    # Create a default Local Analytics service if one does not
    # already exist.
    local_analytics = LocalAnalyticsProvider.initialize(_db)

def allows_admin_auth_setup(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        setting_up = (app.manager.admin_sign_in_controller.admin_auth_providers == [])
        return f(*args, setting_up=setting_up, **kwargs)
    return decorated

def requires_admin(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'setting_up' in kwargs:
            # If the function also requires a CSRF token,
            # setting_up needs to stay in the arguments for
            # the next decorator. Otherwise, it should be
            # removed before the route function.
            if f.__dict__.get("requires_csrf_token"):
                setting_up = kwargs.get('setting_up')
            else:
                setting_up = kwargs.pop('setting_up')
        else:
            setting_up = False
        if not setting_up:
            admin = app.manager.admin_sign_in_controller.authenticated_admin_from_request()
            if isinstance(admin, ProblemDetail):
                return app.manager.admin_sign_in_controller.error_response(admin)
            elif isinstance(admin, Response):
                return admin

        return f(*args, **kwargs)
    return decorated

def requires_csrf_token(f):
    f.__dict__["requires_csrf_token"] = True
    @wraps(f)
    def decorated(*args, **kwargs):
        if 'setting_up' in kwargs:
            setting_up = kwargs.pop('setting_up')
        else:
            setting_up = False
        if not setting_up and flask.request.method in ["POST", "PUT", "DELETE"]:
            token = app.manager.admin_sign_in_controller.check_csrf_token()
            if isinstance(token, ProblemDetail):
                return token
        return f(*args, **kwargs)
    return decorated

def returns_json_or_response_or_problem_detail(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        v = f(*args, **kwargs)
        if isinstance(v, ProblemDetail):
            return v.response
        if isinstance(v, Response):
            return v
        return flask.jsonify(**v)
    return decorated

@app.route('/admin/GoogleAuth/callback')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
def google_auth_callback():
    """Determines Google OAuth client details on callback, redirects to provided URL
    ---
    get:
      tags:
        - authentication
      summary: Redirect to provided URL
      description: |
        Authenticates an admin via Google OAuth and updates/creates the admin as necessary.

        This method includes the side effect of updating/creating new admins. If an admin already
        exists only their credentials are updated.
      parameters:
        - in: query
          name: error
          schema:
            type: string
          description: Error code sometimes generated by Google OAuth client
        - in: query
          name: code
          schema:
            type: string
          description: OAuth authorization code
        - in: query
          name: state
          description: Redirect URL
          schema:
            type: string
      responses:
        302:
          description: Successful authentication and redirect
        4XX:
          description: |
            An error including:
            * `ADMIN_AUTH_MECHANISM_NOT_CONFIGURED`: Google OAuth not available
            * `INVALID_ADMIN_CREDENTIALS`: Auth was unable to validate the authenticated email address
          content:
            application/json:
              schema: ProblemResponse 
        5XX:
          description: |
            An error including:
            * `ADMIN_AUTH_NOT_CONFIGURED`: No admin auth systems set up
          content:
            application/json:
              schema: ProblemResponse 
            
    """
    return app.manager.admin_sign_in_controller.redirect_after_google_sign_in()

@app.route("/admin/sign_in_with_password", methods=["POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
def password_auth():
    """Logs an admin in to the CM with a supplied username and password
    ---
    post:
      tags:
        - authentication
      summary: Redirect to provided URL for local admin authentication
      description: |
        Authenticates an admin via local OAuth and updates/creates the admin as necessary.

        This method includes the side effect of updating/creating new admins. If an admin already
        exists only their credentials are updated.
      parameters:
        - in: query
          name: email
          schema:
            type: string
          description: Email of admin being authenticated
        - in: query
          name: password
          schema:
            type: string
          description: Email of admin being authenticated
        - in: query
          name: redirect
          description: URL for page to be redirected to after sign-in
          schema:
            type: string
      responses:
        302:
          description: Successful authentication and redirect
        4XX:
          description: |
            An error including:
            * `ADMIN_AUTH_MECHANISM_NOT_CONFIGURED`: Google OAuth not available
            * `INVALID_ADMIN_CREDENTIALS`: Auth was unable to validate the authenticated email address
          content:
            application/json:
              schema: ProblemResponse 
        5XX:
          description: |
            An error including:
            * `ADMIN_AUTH_NOT_CONFIGURED`: No admin auth systems set up
          content:
            application/json:
              schema: ProblemResponse 
            
    """
    return app.manager.admin_sign_in_controller.password_sign_in()

@app.route('/admin/sign_in')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
def admin_sign_in():
    """Redirects signed-in users, or displays sign-in page
    ---
    get:
      tags:
        - authentication
      summary: Display sign-in page or redirect signed-in admins to requested page
      description: |
        The method checks to see if an `admin_email` and `auth_type` are configured in the current session.
        If available it validates that these are active credentials and redirects the user to their requested
        page.

        If no credentials are available in the session an HTML page is constructed with the authentication methods
        currently available in the manager instance.
      responses:
        200:
          description: The HTML sign-in page that includes available sign-in methods
        302:
          description: A redirect to the requested page for signed-in admins
        4XX:
          description: |
            An error including:
            * `ADMIN_AUTH_MECHANISM_NOT_CONFIGURED`: Google OAuth not available
            * `INVALID_ADMIN_CREDENTIALS`: Auth was unable to validate the authenticated email address
          content:
            application/json:
              schema: ProblemResponse 
        5XX:
          description: |
            An error including:
            * `ADMIN_AUTH_NOT_CONFIGURED`: No admin auth systems set up
          content:
            application/json:
              schema: ProblemResponse 
    """
    return app.manager.admin_sign_in_controller.sign_in()

@app.route('/admin/sign_out')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def admin_sign_out():
    """Signs user in current session out and redirects to admin sign-in page
    ---
    get:
      tags:
        - authentication
      summary: Sign out currently signed-in admin user
      description: |
        Unsets admin currently set in session with `admin_email` and `auth_type`.

        Then returns a redirect to the admin sign-in page.

        If no user is set in the current session only the redirect is executed
      responses:
        302:
          description: Redirect to admin sign-in page
    """
    return app.manager.admin_sign_in_controller.sign_out()

@app.route('/admin/change_password', methods=["POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def admin_change_password():
    """Allows admins to update their password
    ---
    post:
      tags:
        - authentication
      summary: Update password for currently configured admin.
      description: |
        Sets the password from form data for the current admin. This requires a CSRF token.
      security:
        - BearerAuth
      parameters:
        - X-CSRF-Token
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: ChangePasswordPost
      responses:
        200:
          description: A text confirmation that the password was updated
          content:
            text/html:
              example: Success
    """
    return app.manager.admin_sign_in_controller.change_password()

@library_route('/admin/works/<identifier_type>/<path:identifier>', methods=['GET'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def work_details(identifier_type, identifier):
    """Returns an OPDS work entry with relevant links for editing the work
    ---
    get:
      tags:
        - works
      summary: An OPDS document describing a work
      description: |
        This endpoint fetches an OPDS record by identifier type and identifier.

        It requires that the active admin be a librarian for the library that holds the work.

        The work returned is NOT cached, meaning any changes will appear immediately in this endpoint,
        it also includes any relevant links for updating the work record
      security:
        - BasicAuth
      parameters:
        - in: path
          name: library_short_name
          schema:
            type: string
          description: The short code of a library that holds the requested work
        - in: path
          name: identifier_type
          schema:
            type: string
          description: The type of the identifier being used to retrieve a work
        - in: path
          name: identifier
          schema:
            type: string
          description: An identifier for a work record
      responses:
        200:
          description: A single OPDS record describing the requested work
          content:
            application/atom+xml;type=entry;profile=opds-catalog:
              schema: OPDSEntry
        404:
          description: An error that the work is not available in the requested collection
          content:
            application/json:
              schema: ProblemResponse
        451:
          description: A `NOT_AGE_APPROPRIATE` response, which should not be returned in this context
          content:
            application/json:
              schema: ProblemResponse
    """
    return app.manager.admin_work_controller.details(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/classifications', methods=['GET'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
def work_classifications(identifier_type, identifier):
    return app.manager.admin_work_controller.classifications(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/preview_book_cover', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def work_preview_book_cover(identifier_type, identifier):
    return app.manager.admin_work_controller.preview_book_cover(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/change_book_cover', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def work_change_book_cover(identifier_type, identifier):
    return app.manager.admin_work_controller.change_book_cover(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/complaints', methods=['GET'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
def work_complaints(identifier_type, identifier):
    return app.manager.admin_work_controller.complaints(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/lists', methods=['GET', 'POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def work_custom_lists(identifier_type, identifier):
    return app.manager.admin_work_controller.custom_lists(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/edit', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
@requires_csrf_token
def edit(identifier_type, identifier):
    return app.manager.admin_work_controller.edit(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/suppress', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
@requires_csrf_token
def suppress(identifier_type, identifier):
    return app.manager.admin_work_controller.suppress(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/unsuppress', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
@requires_csrf_token
def unsuppress(identifier_type, identifier):
    return app.manager.admin_work_controller.unsuppress(identifier_type, identifier)

@library_route('/works/<identifier_type>/<path:identifier>/refresh', methods=['POST'])
@has_library
@returns_problem_detail
@requires_admin
@requires_csrf_token
def refresh(identifier_type, identifier):
    return app.manager.admin_work_controller.refresh_metadata(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/resolve_complaints', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
@requires_csrf_token
def resolve_complaints(identifier_type, identifier):
    return app.manager.admin_work_controller.resolve_complaints(identifier_type, identifier)

@library_route('/admin/works/<identifier_type>/<path:identifier>/edit_classifications', methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
@requires_csrf_token
def edit_classifications(identifier_type, identifier):
    return app.manager.admin_work_controller.edit_classifications(identifier_type, identifier)

@app.route('/admin/roles')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
def roles():
    return app.manager.admin_work_controller.roles()

@app.route('/admin/languages')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
def languages():
    return app.manager.admin_work_controller.languages()

@app.route('/admin/media')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
def media():
    return app.manager.admin_work_controller.media()

@app.route('/admin/rights_status')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
def rights_status():
    return app.manager.admin_work_controller.rights_status()

@library_route('/admin/complaints')
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def complaints():
    return app.manager.admin_feed_controller.complaints()

@library_route('/admin/suppressed')
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@requires_admin
def suppressed():
    """Returns a feed of suppressed works."""
    return app.manager.admin_feed_controller.suppressed()

@app.route('/admin/genres')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
def genres():
    """Returns a JSON representation of complete genre tree."""
    return app.manager.admin_feed_controller.genres()

@library_route('/admin/bulk_circulation_events')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
@allows_library
@requires_admin
def bulk_circulation_events():
    """Returns a CSV representation of all circulation events with optional
    start and end times."""
    data, date, date_end, library = app.manager.admin_dashboard_controller.bulk_circulation_events()
    if isinstance(data, ProblemDetail):
        return data

    response = make_response(data)

    # If gathering events per library, include the library name in the file
    # for convenience. The start and end dates will always be included.
    filename = library + "-" if library else ""
    filename += date + "-to-" + date_end if date_end and date != date_end else date
    response.headers['Content-Disposition'] = "attachment; filename=circulation_events_" + filename + ".csv"
    response.headers["Content-type"] = "text/csv"
    return response

@library_route('/admin/circulation_events')
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
def circulation_events():
    """Returns a JSON representation of the most recent circulation events."""
    return app.manager.admin_dashboard_controller.circulation_events()

@app.route('/admin/stats')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
def stats():
    return app.manager.admin_dashboard_controller.stats()

@app.route('/admin/libraries', methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def libraries():
    return app.manager.admin_library_settings_controller.process_libraries()

@app.route("/admin/library/<library_uuid>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def library(library_uuid):
    return app.manager.admin_library_settings_controller.process_delete(library_uuid)

@app.route("/admin/collections", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def collections():
    return app.manager.admin_collection_settings_controller.process_collections()

@app.route("/admin/collection/<collection_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def collection(collection_id):
    return app.manager.admin_collection_settings_controller.process_delete(collection_id)

@app.route("/admin/collection_self_tests/<identifier>", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def collection_self_tests(identifier):
    return app.manager.admin_collection_self_tests_controller.process_collection_self_tests(identifier)

@app.route("/admin/collection_library_registrations", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def collection_library_registrations():
    return app.manager.admin_collection_library_registrations_controller.process_collection_library_registrations()

@app.route("/admin/admin_auth_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def admin_auth_services():
    return app.manager.admin_auth_services_controller.process_admin_auth_services()

@app.route("/admin/admin_auth_service/<protocol>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def admin_auth_service(protocol):
    return app.manager.admin_auth_services_controller.process_delete(protocol)

@app.route("/admin/individual_admins", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@allows_admin_auth_setup
@requires_admin
@requires_csrf_token
def individual_admins():
    """Manage individual site administrators
    ---
    get:
      tags: 
        - administration
      summary: Fetch list of site administrators
      description: Get a list of all site administrators with details, accessible to all admins
      security:
        - BearerAuth
      responses:
        200:
          description: List of currently authorized admins
          content:
            application/json:
              schema: IndividualAdminResponse
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    post:
      tags:
        - administration
      summary: Create first site admin or update administrators
      description: |
        Create a site administrator with specific privledges. The following restrictions apply:
        * System admins have all permissions
        * Sitewide library managers can add/edit other sitewide managers, as well as specific library managers
        * Managers of specific library managers can manage managers and librarians within their library
        * Librarians have no special permissions
      security:
        - BearerAuth
      parameters:
        - X-CSRF-Token
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: SiteAdminPost
      responses:
        200:
          description: Email address of updated admin
          content:
            text/html:
              schema: 
                type: string
                example: existing_user@example.com
        201:
          description: Email address of newly created admin
          content:
            text/html:
              schema: 
                type: string
                example: new_user@example.com
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/incomplete-configuration`
            * `http://librarysimplified.org/terms/problem/invalid-email`
            * `http://librarysimplified.org/terms/problem/unknown-role`
            * `http://librarysimplified.org/terms/problem/library-not-found`
            * `http://librarysimplified.org/terms/problem/missing-pgcrypto-extension`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    """
    return app.manager.admin_individual_admin_settings_controller.process_individual_admins()

@app.route("/admin/individual_admin/<email>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def individual_admin(email):
    """Delete a site administrator
    ---
    delete:
      tags:
        - administration
      summary: Delete administrator by email address
      description: In order to execute this operation the current user must be a) a site admin and b) have sitewide library permissions
      security:
        - BearerAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: email
          schema:
            type: string
          required: true
          description: email of administrator to delete
      responses:
        200:
          description: Successful deletion of admin
          content:
            text/html:
              schema:
                type: string
                enum:
                  - Deleted
                example: Deleted
        403:
          description: User Unauthorized to perform admin deletions
          content:
            application/json:
              schema: ProblemResponse
        404:
          description: Unable to locate admin with specified email
          content:
            application/json:
              schema: ProblemResponse
    """
    return app.manager.admin_individual_admin_settings_controller.process_delete(email)

@app.route("/admin/patron_auth_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def patron_auth_services():
    return app.manager.admin_patron_auth_services_controller.process_patron_auth_services()

@app.route("/admin/patron_auth_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def patron_auth_service(service_id):
    return app.manager.admin_patron_auth_services_controller.process_delete(service_id)

@app.route("/admin/patron_auth_service_self_tests/<identifier>", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def patron_auth_self_tests(identifier):
    return app.manager.admin_patron_auth_service_self_tests_controller.process_patron_auth_service_self_tests(identifier)

@library_route("/admin/manage_patrons", methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def lookup_patron():
    return app.manager.admin_patron_controller.lookup_patron()

@library_route("/admin/manage_patrons/reset_adobe_id", methods=['POST'])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def reset_adobe_id():
    return app.manager.admin_patron_controller.reset_adobe_id()

@app.route("/admin/metadata_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def metadata_services():
    return app.manager.admin_metadata_services_controller.process_metadata_services()

@app.route("/admin/metadata_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def metadata_service(service_id):
    return app.manager.admin_metadata_services_controller.process_delete(service_id)

@app.route("/admin/metadata_service_self_tests/<identifier>", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def metadata_service_self_tests(identifier):
    return app.manager.admin_metadata_service_self_tests_controller.process_metadata_service_self_tests(identifier)

@app.route("/admin/analytics_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def analytics_services():
    return app.manager.admin_analytics_services_controller.process_analytics_services()

@app.route("/admin/analytics_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def analytics_service(service_id):
    return app.manager.admin_analytics_services_controller.process_delete(service_id)

@app.route("/admin/cdn_services", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def cdn_services():
    return app.manager.admin_cdn_services_controller.process_cdn_services()

@app.route("/admin/cdn_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def cdn_service(service_id):
    return app.manager.admin_cdn_services_controller.process_delete(service_id)

@app.route("/admin/search_services", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def search_services():
    return app.manager.admin_search_services_controller.process_services()

@app.route("/admin/search_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def search_service(service_id):
    return app.manager.admin_search_services_controller.process_delete(service_id)

@app.route("/admin/search_service_self_tests/<identifier>", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def search_service_self_tests(identifier):
    return app.manager.admin_search_service_self_tests_controller.process_search_service_self_tests(identifier)


@app.route("/admin/storage_services", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def storage_services():
    return app.manager.admin_storage_services_controller.process_services()

@app.route("/admin/storage_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def storage_service(service_id):
    return app.manager.admin_storage_services_controller.process_delete(service_id)

@app.route("/admin/catalog_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def catalog_services():
    return app.manager.admin_catalog_services_controller.process_catalog_services()

@app.route("/admin/catalog_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def catalog_service(service_id):
    return app.manager.admin_catalog_services_controller.process_delete(service_id)

@app.route("/admin/discovery_services", methods=["GET", "POST"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def discovery_services():
    return app.manager.admin_discovery_services_controller.process_discovery_services()

@app.route("/admin/discovery_service/<service_id>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def discovery_service(service_id):
    return app.manager.admin_discovery_services_controller.process_delete(service_id)

@app.route("/admin/sitewide_settings", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def sitewide_settings():
    return app.manager.admin_sitewide_configuration_settings_controller.process_services()

@app.route("/admin/sitewide_setting/<key>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def sitewide_setting(key):
    return app.manager.admin_sitewide_configuration_settings_controller.process_delete(key)

@app.route("/admin/logging_services", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def logging_services():
    return app.manager.admin_logging_services_controller.process_services()

@app.route("/admin/logging_service/<key>", methods=["DELETE"])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def logging_service(key):
    return app.manager.admin_logging_services_controller.process_delete(key)

@app.route("/admin/discovery_service_library_registrations", methods=['GET', 'POST'])
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def discovery_service_library_registrations():
    return app.manager.admin_discovery_service_library_registrations_controller.process_discovery_service_library_registrations()

@library_route("/admin/custom_lists", methods=["GET", "POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def custom_lists():
    """Get a full list for the current user's library, or update a specific list
    ---
    get:
      tags:
        - lists
      summary: Return a full set of lists defined for the current library
      description: |
        Fetches a full set of lists for the library currently set in the Flask request.
        The current user must have librarian privledges at that library to view the lists.
        
        These are structured as objects with an id, name and an array of collections.
        Each collection within the list is returned as a basic object.
      security:
        - BasicAuth
      parameters:
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      responses:
        200:
          description: Returns a simple object that contains an array of list objects
          content:
            application/json:
              schema: CustomListResponse
        403:
          description: The current admin is not an authorized librarian for the current library
          content:
            application/json:
              schema: ProblemResponse 
    post:
      tags:
        - lists
      summary: Create or Update a custom list for the current library
      description: |
        This endpoint accepts a submitted form that can contain JSON data for entries and collections

        If a list already exists with the provided identifier it is updated.
        If no list exists a new one is created with the relevant details in the current library

        If during this process a work is newly added to this list, associated lanes and counts will also be updated.
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: CustomListUpsertPost
      responses:
        200:
          description: A text response containing only the id of the updated list object
          content:
            text/html:
              example: 1234
        201:
          description: A text response containing only the id of a newly created list
          content:
            text/html:
              example: 1234
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/missing-custom-list`
            * `http://librarysimplified.org/terms/problem/cannot-change-library-for-custom-list`
            * `http://librarysimplified.org/terms/problem/custom-list-name-already-in-use`
            * `http://librarysimplified.org/terms/problem/missing-collection`
            * `http://librarysimplified.org/terms/problem/collection-not-associated-with-library`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
        4XX:
          description: |
            One of the following endpoint-specific errors
            * `AdminNotAuthorized`: Current admin cannot perform this operation for this library
            * `MISSING_CUSTOM_LIST`: No list could be found for provided identifier
            * `CANNOT_CHANGE_LIBRARY_FOR_CUSTOM_LIST`: Library on existing list does not currently active library
            * `CUSTOM_LIST_NAME_ALREADY_IN_USE`: List contains a duplicate name (which must be unique)
            * `MISSING_COLLECTION`: A collection cannot be found by the supplied identifier
            * `COLLECTION_NOT_ASSOCIATED_WITH_LIBRARY`: The specified collection is associated with a different library
          content:
            application/json:
              schema: ProblemResponse
    """
    return app.manager.admin_custom_lists_controller.custom_lists()

@library_route("/admin/custom_list/<list_id>", methods=["GET", "POST", "DELETE"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def custom_list(list_id):
    """Return, update or delete a specific list
    ---
    get:
      tags:
        - lists
      summary: Return a list identified by the supplied `list_id`
      description: |
        Fetches a list by identifier for the current library and returns the list as an OPDS Feed.

        This feed is annotated in the context of the admin control which includes a search link for each lane.
        Each individual work should also be annotated with the available admin actions in the feed.
      security:
        - BasicAuth
      parameters:
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: list_id
          description: Identifier of requested list object
          schema:
            type: string
      responses:
        200:
          description: A fully annotated OPDS feed representing the requested list
          content:
            appplication/atom+xml;profile=opds-catalog;kind=acquisition:
              schema: OPDSFeedResponse
    post:
      tags:
        - lists
      summary: Update an existing list
      description: |
        Allows a user to update an existing list, updating the entries, collections and providing specific entries to delete.

        This differs from the create/update endpoint that does not allow for the specification of these `deletedEntries`, 
        otherwise the functionality of the endpoints are the same.
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: list_id
          description: Identifier of requested list object
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: CustomListUpdatePost
      responses:
        200:
          description: A text response containing only the id of the updated list object
          content:
            text/html:
              example: 1234
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/missing-custom-list`
            * `http://librarysimplified.org/terms/problem/cannot-change-library-for-custom-list`
            * `http://librarysimplified.org/terms/problem/custom-list-name-already-in-use`
            * `http://librarysimplified.org/terms/problem/missing-collection`
            * `http://librarysimplified.org/terms/problem/collection-not-associated-with-library`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    delete:
      tags:
        - lists
      summary: Delete an existing list
      description: |
        Only library managers may perform this action, which fully deletes a list and all associated entries and lanes.
        If a lane is associated with other lists, it is preserved and it's size is updated.

        This change is immediately persisted in the database.
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: list_id
          description: Identifier of requested list object
          schema:
            type: string
      responses:
        200:
          description: A text response confirming that the delete operation completed successfully
          content:
            text/html:
              example: Deleted
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/missing-custom-list`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    """
    return app.manager.admin_custom_lists_controller.custom_list(list_id)

@library_route("/admin/lanes", methods=["GET", "POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def lanes():
    """Retrieve lanes or create/update an individual lane for the current library
    ---
    get:
      tags:
        - lanes
      summary: Retrieve a list of lanes for the current library
      description: |
        Retrieves all lists associated with the currently configured library.
        The current user must have a librarian role on the current library to perform the operations.

        This will recursively fetch all lanes nested within a library's top-level lanes, 
        returning a full representation of the lane structure.        
      security:
        - BasicAuth
      parameters:
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      responses:
        200:
          description: An array of lane objects
          content:
            application/json:
              schema: LaneListResponse
        4XX:
          description: An error representing that the current user does not have permissions to view lanes for the current library
          content:
            application/json:
              schema: ProblemResponse
    post:
      tags:
        - lanes
      summary: Create or update a lane from data supplied in a form
      description: |
        This operation requires that the user be a library manager, and will create/update a lane.

        The created lane can be a top-level lane, or a sublane (if a parent_id is provided).
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: LaneUpsertPost
      responses:
        200:
          description: Lane identifier confirming that the lane was successfully updated
          content:
            text/html:
              example: 1234
        201:
          description: Lane identifier confirming that the lane was successully created
          content:
            text/html:
              example: 1234
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/no-display-name-for-lane`
            * `http://librarysimplified.org/terms/problem/no-custom-lists-for-lane`
            * `http://librarysimplified.org/terms/problem/missing-lane`
            * `http://librarysimplified.org/terms/problem/cannot-edit-default-lane`
            * `http://librarysimplified.org/terms/problem/lane-with-parent-and-display-name-already-exists`
            * `http://librarysimplified.org/terms/problem/missing-custom-list`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    """
    return app.manager.admin_lanes_controller.lanes()

@library_route("/admin/lane/<lane_identifier>", methods=["DELETE"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def lane(lane_identifier):
    """Delete an existing custom lane
    ---
    delete:
      tags:
        - lanes
      summary: Delete an existing custom lane defined by the supplied identifier
      description: |
        Allows library managers only to delete existing custom lanes.

        Default lanes cannot be deleted, and all sublanes within the deleted lane are
        also recursively deleted.
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: lane_identifier
          description: Public identifier for a lane
          schema:
            type: string
      responses:
        200:
          description: A statement confirming successful deletion of the lane
          content:
            text/html:
              example: Deleted
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/missing-lane`
            * `http://librarysimplified.org/terms/problem/cannot-edit-default-lane`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    """
    return app.manager.admin_lanes_controller.lane(lane_identifier)

@library_route("/admin/lane/<lane_identifier>/show", methods=["POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def lane_show(lane_identifier):
    """Toggles a lane to be publically visible
    ---
    post:
      tags:
        - lanes
      summary: Update the visibility of a lane, toggling it to be visible
      description: |
        Controls the visibility of a lane, setting it to be visible.
        The current user must be a library manager to perform this action

        If the parent of the lane is hidden this opperation will return an error, 
        and if the lane is already visible the action has no effect
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: lane_identifier
          description: Public identifier for a lane
          schema:
            type: string
      responses:
        200:
          description: A statement confirming a successful update of the `visible` attribute
          content:
            text/html:
              example: Success
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this endpoint are:
            * `http://librarysimplified.org/terms/problem/missing-lane`
            * `http://librarysimplified.org/terms/problem/cannot-show-lane-with-hidden-parent`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
              schema: ProblemResponse
    """
    return app.manager.admin_lanes_controller.show_lane(lane_identifier)

@library_route("/admin/lane/<lane_identifier>/hide", methods=["POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def lane_hide(lane_identifier):
    """Toggles a lane to be hidden
    ---
    post:
      tags:
        - lanes
      summary: Update the visibility of a lane, toggling it to be hidden
      description: |
        Controls the visibility of a lane, setting it to be hidden.
        The current user must be a library manager to perform this action

        If the lane is already visible the action has no effect
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
        - in: path
          name: lane_identifier
          description: Public identifier for a lane
          schema:
            type: string
      responses:
        200:
          description: A statement confirming a successful update of the `visible` attribute
          content:
            text/html:
              example: Success
        403:
          description: |
            An authentication error in which the user could not be authenticated, or 
            is outherwise un-authorized to perform this action.

            This returns an HTML page with details of the error and a link to the sign-in page.
          content:
            text/html:
              example: |
                403 ERROR: Unauthorized for Operation. Try Again <link>
        4XX:
          description: |
            These are anticipated errors due to a malformed request, invalid option, 
            or other issue with the current request. These are returned as JSON objects with 
            a uniquely identifying URI. Possible URIs for this lane are:
            * `http://librarysimplified.org/terms/problem/missing-lane`
          content:
            application/json:
              schema: ProblemResponse
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
    """
    return app.manager.admin_lanes_controller.hide_lane(lane_identifier)

@library_route("/admin/lanes/reset", methods=["POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def reset_lanes():
    """Resets the given library's lanes to the default.
    ---
    post:
      tags:
        - lanes
      summary: Resets the given library's lanes to the default, DELETING all custom lanes
      description: |
        This will reset all lanes to their default values. The following top-level lanes
        will be created for each large-collection, each of which contains further sub-lanes.
        * Adult Fiction
        * Adult Nonfiction
        * Young Adult Fiction
        * Young Adult Nonfiction
        * Children

        If configured, the NYT best-sellers lane will also be set.

        If any small- or tiny-collection languages are present a "World Languages" lane will be created, 
        which will contain sub-lanes for individual languages.

        If not otherwise defined `large`, `small` and `tiny` are defined as >10%, >1% and <1% respectively
        from the largest language in the library.

        WARNING: This can be extremely destructive! All new lanes will be visible and all existing
        lanes will be deleted.
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      responses:
        200:
          description: A confirmation statement that the operation completed successfully
          content:
            text/html:
              example: Success
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
    """
    return app.manager.admin_lanes_controller.reset()

@library_route("/admin/lanes/change_order", methods=["POST"])
@has_library
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
@requires_admin
@requires_csrf_token
def change_lane_order():
    """Update lane order to order specified in request
    ---
    post:
      tags:
        - lanes
      summary: Updates lane order to match order as specified in request
      description: | 
        This will update the display order of lanes to match the order as specified in
        this request. This includes any sublanes if specified for each parent lane.

        Lanes are fetched by identifier and updated exactly in the order provided.

        This operation requires that the current user have library manager permissions
      security:
        - BasicAuth
      parameters:
        - X-CSRF-Token
        - in: path
          name: library_short_name
          description: Short identifying code for a library
          schema:
            type: string
      requestBody:
        required: True
        content:
          application/json:
            schema: ChangeOrderBody
      responses:
        200:
          description: Confirmation statement that the operation completed successfully
          content:
            text/html:
              example: Success
        5XX:
          description: |
            An unanticipated bug in the system that could not be properly handled.

            If the API server is running in debug mode the output will contain a traceback, 
            otherwise a basic error message will be displayed.
          content:
            text/html:
              example: An internal error occurred
    """
    return app.manager.admin_lanes_controller.change_order()

@app.route("/admin/diagnostics")
@requires_admin
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_json_or_response_or_problem_detail
def diagnostics():
    return app.manager.timestamps_controller.diagnostics()

@app.route('/admin/sign_in_again')
@allows_cors(allowed_domain_type=set({"admin"}))
def admin_sign_in_again():
    """Allows an  admin with expired credentials to sign back in
    from a new browser tab so they won't lose changes.
    """
    admin = app.manager.admin_sign_in_controller.authenticated_admin_from_request()
    csrf_token = app.manager.admin_sign_in_controller.get_csrf_token()
    if isinstance(admin, ProblemDetail) or csrf_token is None or isinstance(csrf_token, ProblemDetail):
        redirect_url = flask.request.url
        return redirect(app.manager.url_for('admin_sign_in', redirect=redirect_url))
    return flask.render_template_string(sign_in_again_template)

@app.route('/admin/web/', strict_slashes=False)
@app.route('/admin/web/collection/<path:collection>/book/<path:book>')
@app.route('/admin/web/collection/<path:collection>')
@app.route('/admin/web/book/<path:book>')
@app.route('/admin/web/<path:etc>') # catchall for single-page URLs
@allows_cors(allowed_domain_type=set({"admin"}))
def admin_view(collection=None, book=None, etc=None, **kwargs):
    return app.manager.admin_view_controller(collection, book, path=etc)

@app.route('/admin/', strict_slashes=False)
@allows_cors(allowed_domain_type=set({"admin"}))
def admin_base(**kwargs):
    return redirect(app.manager.url_for('admin_view'))

@app.route('/admin/static/circulation-web.js')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
def admin_js():
    return app.manager.static_files.static_file(app.static_resources_dir, "circulation-web.js")

@app.route('/admin/static/circulation-web.css')
@allows_cors(allowed_domain_type=set({"admin"}))
@returns_problem_detail
def admin_css():
    return app.manager.static_files.static_file(app.static_resources_dir, "circulation-web.css")
