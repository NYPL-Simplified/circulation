# /etc/cron.d/circulation: Library Simplified Circulation Manager crontab
# You don't have to run the `crontab' command to install the new
# version when you edit this file in /etc/cron.d. Files in this directory
# also have username fields, similar to the systemwide /etc/crontab.

#### Crontab Cheatsheet for Editors ##########################################
#
# Timing Fields - five whitespace-separated fields at the start of every line:
#
#       - Minute of Hour (0-59)
#       - Hour of Day (0-23)
#       - Day of Month (1-31)
#       - Month of Year (1-12)
#       - Day of Week (0-7, with both 0 and 7 being Sunday)
#
# Non-integer Timing Values
#
#       *               - Any/all values for this field
#       m,n[,o,...]     - Multiple discrete values
#       m-n             - Range of values
#       m/n             - Step values
#
# Full Syntax of a Crontab Entry:
#
#       <Minute> <Hour> <DoM> <Month> <DoW> <User> <Command>
#
#       (Note that the <User> field is optional, and not used in this file.)
#
# Getting useful log output running cron inside a Docker container:
#
#       - The LS scripts are executed by a wrapper script (core/bin/run) which
#         handles PID locking to ensure only one copy of a script is executing
#         at any one time.
#       - The core/bin/run script is set up to redirect the output of each
#         individual script that it starts to a matching log file under
#         /var/log/simplified.
#       - However, if we want to capture output generated by statements in the
#         wrapper script, we have to set up output redirection in this file.
#         Otherwise any output of that script will be discarded.
#       - A Docker container will only output to the host via the STDOUT
#         and STDERR of whatever the PID 1 process is.
#       - Therefore we'll be redirecting to those handles within our cron
#         lines below.
#
#   The general pattern will be:
#
#      * * * * * core/bin/run <some_script_name> |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR
#
#   That's quite long (you can't break crontab entries across lines), so here's
#   a breakdown of each piece:
#
#       * * * * *                               <-- Timing fields
#       core/bin/run <some_script_name>         <-- Call to our wrapper script
#       |&                                      <-- Pipe both STDOUT and STDERR
#       tee -a /var/log/cron.log                <-- Split output to file and stream
#       > $PID1_STDOUT 2>$PID1_STDERR           <-- Redirect stream to OUT/ERR of PID 1
#
#   In plain language, we are telling the cron daemon to do the following:
#
#       1. Attempt to run our wrapper script with the given script name argument
#       3. Pipe the combined STDOUT/STDERR output onward
#       4. Use `tee` in append mode (with -a) to take the values passed to it on
#          STDIN and append them to the /var/log/cron.log file, while also passing
#          them onward via STDOUT / STDERR. (That's what tee does--writes a stream to
#          a file without interrupting the normal flow of output redirection.)
#       5. Redirect the STDOUT of the `tee` call to the STDOUT of the process with id 1.
#       6. Redirect the STDERR of the `tee` call to the STDERR of the process with id 1.
#
#   All of which is in support of the following goals:
#
#       1. For a successful run of the wrapper script, output whatever it writes to
#          STDOUT to both the container's STDOUT and the /var/log/cron.log file.
#       2. For a failed run of the wrapper script, output a message with the timestamp,
#          the word CRITICAL, and the name of the script the wrapper called, and have
#          that go to both the container STDOUT and /var/log/cron.log.
#
#   Note that the wrapper script will log its own messages to a logfile in
#   /var/log/simplified that's named after the script it was asked to run. Those
#   messages will typically NOT appear in the container output or the cron.log file.
#
##############################################################################

## Environment Variables for Cron Shells #####################################

SHELL=/bin/bash
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
HOME=/home/simplified/circulation
# Keeps cron from trying to add output to a mail spool
MAILTO=""

PID1_STDOUT=/proc/1/fd/1
PID1_STDERR=/proc/1/fd/2


## Crontab Entries for Library Simplified ####################################
#
# For reference info on all the scripts below, see the individual entries here:
#
#   https://github.com/NYPL-Simplified/Simplified/wiki/Circulation-Manager-Scripts
#
##############################################################################

#### Updates to caches and indexes ###########################################

# cache_opds_blocks - Refresh the top-level OPDS groups
#   Frequency: Every 5th minute
*/5 * * * * core/bin/run cache_opds_blocks |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# search_index_refresh - Re-index any Works with outdated search index entries
#   Frequency: Every 6th minute
*/6 * * * * core/bin/run search_index_refresh |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# search_index_clear - Mark all Works as having out-of-date search index entries.
#   Frequency: Minute 10 of Hour 0 (once daily)
10 0 * * * core/bin/run search_index_clear |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# update_custom_list_size - Update the cached sizes of all custom lists.
#   Frequency: Minute 0 of hour 0 (once daily)
0 0 * * * core/bin/run update_custom_list_size |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# update_lane_size - Update the cached sizes of all lanes.
#   Frequency: Minute 0 of hour 10 (once daily)
0  10 * * * core/bin/run update_lane_size |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#### Bibliographic metadata maintenance ######################################

# update_nyt_best_seller_lists - Bring in the entire history of all NYT best-seller lists.
#   Frequency: Minute 30 of hour 3 (once daily)
30 3 * * * core/bin/run update_nyt_best_seller_lists |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# work_presentation_editions - Re-generate presentation editions of any Works that need it.
#   Frequency: Minute 0 of every 3rd hour
0 */3 * * * core/bin/run work_presentation_editions |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# work_classification - Re-classify any Works that need it.
#   Frequency: Minute 0 of every 3rd hour
0 */3 * * * core/bin/run work_classification |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# work_classify_unchecked_subjects - (Re)calculate the presentation of works associated with unchecked subjects.
#   Frequency: Minute 30 of hour 22 (once daily)
30 22 * * * core/bin/run work_classify_unchecked_subjects |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# opds_entry_coverage - Make sure all presentation-ready works have up-to-date OPDS entries.
#   Frequency: Minute 40 of hour 22 (once daily)
40 22 * * * core/bin/run opds_entry_coverage |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# marc_record_coverage - Make sure all presentation-ready works have up-to-date MARC records.
#   Frequency: Minute 40 of hour 23 (once daily)
40 23 * * * core/bin/run marc_record_coverage |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# database_reaper - Remove miscellaneous expired things (Credentials, CachedFeeds, Loans, etc.) from the database.
#   Frequency: Minute 0 of hour 2 (once daily)
0 2 * * * core/bin/run database_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# novelist_update - Get all ISBNs for all collections in a library and send to NoveList.
#   Frequency: Minute 0 of hour 0, on Sundays (once weekly)
0 0 * * 0 core/bin/run -d 60 novelist_update |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# cache_marc_files - Generate MARC files for libraries that have a MARC exporter configured.
#   Frequency: Minute 0 of hour 1 (once daily)
0 1 * * * core/bin/run cache_marc_files |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR


#### Collection syncing with distributor APIs ################################

#--- Axis 360 ----------------------------------------------------------------

# axis_monitor - Monitor the Axis 360 collection by asking about recently changed books.
#   Frequency: Every 15th minute
*/15 * * * * core/bin/run axis_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# axis_reaper - Monitor the Axis collection by looking for books that have been removed.
#   Frequency: Every 30th minute
*/30 * * * core/bin/run axis_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- Bibliotheca -------------------------------------------------------------

# bibliotheca_monitor - Monitor the Bibliotheca collections by asking about recently changed events.
#   Frequency: Every 15th minute
*/15 * * * * core/bin/run bibliotheca_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# bibliotheca_purchase_monitor - Ask the Bibliotheca API about license purchases, potentially purchases that happened many years in the past.
#   Frequency: Minute 20 of every hour
20 */1 * * * core/bin/run bibliotheca_purchase_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# bibliotheca_circulation_sweep - Sweep through our Bibliotheca collections verifying circulation stats.
#   Frequency: Every 30th minute
*/30 * * * * core/bin/run bibliotheca_circulation_sweep |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- Overdrive ---------------------------------------------------------------

# overdrive_new_titles - Look for new titles added to Overdrive collections which slipped through the cracks.
#   Frequency: Minute 0 of every 5th hour
0 */5 * * * core/bin/run overdrive_new_titles |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# overdrive_monitor_recent - Monitor the Overdrive collections by going through the recently changed list.
#   Frequency: Every 15th minute
*/15 * * * * core/bin/run overdrive_monitor_recent |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# overdrive_reaper - Monitor the Overdrive collections by looking for books with lost licenses.
#   Frequency: Every 15th minute
*/15 * * * * core/bin/run overdrive_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# overdrive_format_sweep - Sweep through our Overdrive collections updating delivery mechanisms.
#   Frequency: Every 30th minute
*/30 * * * * core/bin/run overdrive_format_sweep |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- Enki --------------------------------------------------------------------

# enki_reaper - Monitor the Enki collection by looking for books with lost licenses.
#   Frequency: Minute 30 of every 6th hour
30 */6 * * core/bin/run enki_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# enki_import - monitor the Enki collection by asking about recently changed books.
#   Frequency: Minute 0 of every 6th hour
0 */6 * * * core/bin/run enki_import |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- OPDS For Distributors ---------------------------------------------------

# opds_for_distributors_reaper_monitor - Update the circulation manager server to remove books that have been removed from OPDS for distributors collections.
#   Frequency: Minute 0 of hour 2 (once daily)
0 2 * * * core/bin/run opds_for_distributors_reaper_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# opds_for_distributors_import_monitor - Update the circulation manager server with new books from OPDS import collections that have authentication.
#   Frequency: Minute 0 of hour 4 (once daily)
0 4 * * * core/bin/run opds_for_distributors_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- Vanilla OPDS 1.x --------------------------------------------------------

# opds_import_monitor - Update the circulation manager server with new books from OPDS import collections.
#   Frequency: Minute 0 of hour 5 (once daily)
0 5 * * * core/bin/run opds_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- Vanilla OPDS 2.x --------------------------------------------------------

# opds2_import_monitor - Update the circulation manager server with new books from OPDS 2.0 import collections.
#   Frequency: Minute 30 of hour 5 (once daily)
30 5 * * * core/bin/run opds2_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- OPDS import from Feedbooks ----------------------------------------------

# feedbooks_import_monitor - Update the circulation manager server with new books from Feedbooks collections.
#   Frequency: Minute 0 of hour 3 (once daily)
* 3 * * * core/bin/run feedbooks_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- ODL import --------------------------------------------------------------

# odl_import_monitor - Update the circulation manager server with new books from ODL collections.
#   Frequency: Minute 0 of hour 6 (once daily)
0 6 * * * core/bin/run odl_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# odl_hold_reaper - Check for ODL holds that have expired and delete them.
#   Frequency: Minute 0 of every 8th hour
0 */8 * * * core/bin/run odl_hold_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# odl_reaper - ??? TODO: Find out why this isn't in the scripts wiki page.
#   Frequency: Minute 0 of every 14th hour
0 */14 * * * core/bin/run odl_reaper |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

# shared_odl_import_monitor - Update the circulation manager server with new books from shared ODL collections.
#   Frequency: Minute 5 of every 6th hour
5 */6 * * * core/bin/run shared_odl_import_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- ProQuest ----------------------------------------------------------------

# proquest_import_monitor - Import ProQuest OPDS 2.0 feeds into Circulation Manager.
#   Frequency: Minute 0 of hour 7, on Tuesdays and Fridays
0 7 * * 2,5 core/bin/run proquest_import_monitor --process-removals |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#--- SAML --------------------------------------------------------------------

# saml_monitor - Refreshes SAML federated metadata.
#   Frequency: Minute 0 of hour 5 (once daily)
0 5 * * * core/bin/run saml_monitor |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR

#### DEPRECATED ##############################################################

# Add newly discovered identifiers to our Metadata Wrangler collection.
#*/10 * * * * core/bin/run -d 9 metadata_wrangler_collection_registrar >> /var/log/cron.log 2>&1

# Remove newly removed identifiers from our Metadata Wrangler collection
#0 */22 * * * core/bin/run -d 50 metadata_wrangler_collection_reaper >> /var/log/cron.log 2>&1

# Check whether the Metadata Wrangler has ascertained any new
# information about books in our collection.
#*/59 * * * * core/bin/run -d 50 metadata_wrangler_collection_updates >> /var/log/cron.log 2>&1

# If the Metadata Wrangler needs content such as book covers or distributor
# information that only we can provide, send it over.
#30 21 * * * core/bin/run -d 60 metadata_upload_coverage >> /var/log/cron.log 2>&1
#0 3 * * 3 core/bin/run -d 60 metadata_wrangler_auxiliary_metadata >> /var/log/cron.log 2>&1

# RBdigital
#
#0 */4 * * * core/bin/run rbdigital_availability_monitor >> /var/log/cron.log 2>&1
#0 23 * * * core/bin/run rbdigital_collection_delta >> /var/log/cron.log 2>&1
#0 23 * * * core/bin/run rbdigital_initial_import >> /var/log/cron.log 2>&1

#--- Odilo -------------------------------------------------------------------

# odilo_monitor_recent - Updates an Odilo collection.
#   Frequency: Every 15th minute
#*/15 * * * * core/bin/run odilo_monitor_recent |& tee -a /var/log/cron.log > $PID1_STDOUT 2>$PID1_STDERR
